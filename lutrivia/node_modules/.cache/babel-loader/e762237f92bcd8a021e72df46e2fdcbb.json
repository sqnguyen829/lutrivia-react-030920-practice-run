{"ast":null,"code":"var _jsxFileName = \"/Users/snguyen/Downloads/lutrivia-react-master/lutrivia/src/containers/Game.js\";\nimport React, { Component } from 'react';\nimport NewGame from '../components/NewGame';\nimport QuestionList from './QuestionList';\nimport Score from '../components/Score';\n\nclass Game extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questions: [],\n      currentQuiz: [],\n      points: 0,\n      key: null\n    };\n\n    this.getFourQuestions = questions => {\n      let fourQuestions = []; //use a while loop if we are checking for repeat question or filter or slice\n\n      for (let i = 0; i < 4; i++) {\n        let question = questions[Math.floor(Math.random() * questions.length)];\n        fourQuestions.push(question);\n      }\n\n      console.log('getFourQuestions');\n      return fourQuestions;\n    };\n\n    this.newQuiz = questions => {\n      this.setState({\n        currentQuiz: this.getFourQuestions(questions),\n        key: random\n      });\n      console.log('newQuiz');\n    };\n\n    this.increasePoints = () => {\n      this.setState({\n        points: this.state.points + 1\n      });\n      console.log('increasePoints');\n    };\n\n    this.randomNum = () => {\n      let num = Math.floor(Math.random() * Math.floor(10000000));\n      console.log(num);\n      return num;\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:3000/questions').then(res => res.json()).then(questions => {\n      this.setState({\n        questions: questions,\n        currentQuiz: this.getFourQuestions(questions)\n      });\n    });\n  }\n\n  render() {\n    console.log(\"GameComponent\");\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Lutrivia\"), React.createElement(Score, {\n      points: this.state.points,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(NewGame, {\n      questions: this.state.questions,\n      newQuiz: this.newQuiz,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(QuestionList, {\n      currentQuiz: this.state.currentQuiz,\n      increasePoints: this.increasePoints,\n      randomNum: this.randomNum,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/snguyen/Downloads/lutrivia-react-master/lutrivia/src/containers/Game.js"],"names":["React","Component","NewGame","QuestionList","Score","Game","state","questions","currentQuiz","points","key","getFourQuestions","fourQuestions","i","question","Math","floor","random","length","push","console","log","newQuiz","setState","increasePoints","randomNum","num","componentDidMount","fetch","then","res","json","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport NewGame from '../components/NewGame'\nimport QuestionList from './QuestionList'\nimport Score from '../components/Score'\nclass Game extends Component {\n\n    state = {\n        questions: [],\n        currentQuiz:[],\n        points:0,\n        key: null\n    }\n\n    componentDidMount() {\n        fetch('http://localhost:3000/questions')\n        .then(res => res.json())\n        .then(questions => {\n            this.setState({\n                questions: questions,\n                currentQuiz: this.getFourQuestions(questions)\n            })\n        })\n    }\n\n    getFourQuestions = (questions) => {\n        let fourQuestions = []\n        //use a while loop if we are checking for repeat question or filter or slice\n        for (let i = 0; i < 4; i++) {\n            let question = questions[Math.floor(Math.random()*questions.length)]\n            fourQuestions.push(question)\n        }\n        console.log('getFourQuestions')\n        return fourQuestions\n    }\n\n    newQuiz = (questions) => {\n        this.setState({\n            currentQuiz: this.getFourQuestions(questions),\n            key: random\n        })\n        console.log('newQuiz')\n    }\n\n    increasePoints = () => {\n        this.setState({\n            points:this.state.points + 1\n        })\n        console.log('increasePoints')\n    }\n\n    randomNum = () => {\n        let num = Math.floor(Math.random() * Math.floor(10000000))\n        console.log(num)\n        return num\n    }\n\n    render() {\n        console.log(\"GameComponent\")\n        return (\n            <div>\n                <h1>Lutrivia</h1>\n                <Score points = { this.state.points }/>\n                <NewGame \n                    questions = { this.state.questions }\n                    newQuiz = { this.newQuiz }\n                />\n                <QuestionList \n                    currentQuiz = { this.state.currentQuiz }\n                    increasePoints = { this.increasePoints }\n                    randomNum  = { this.randomNum }\n                />\n            </div>\n        )\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}